{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "feff21ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import keras\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers import Dense, LSTM, Conv1D, MaxPooling1D, Dropout, Flatten, BatchNormalization, Input, Convolution2D, Activation,TimeDistributed\n",
    "from keras.layers import Input, multiply, concatenate, Activation, Masking, Reshape\n",
    "from keras.layers import GlobalAveragePooling1D, Permute, Dropout\n",
    "import random\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm\n",
    "from glob import glob\n",
    "import librosa\n",
    "import pickle\n",
    "from tensorflow.keras import layers \n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "\n",
    "class sound_marge:\n",
    "    def __init__(self):\n",
    "        \n",
    "        os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"1\"\n",
    "        self.max_pad_len = 174\n",
    "        self.fulldatasetpath = 'data/'\n",
    "        self.metadata = pd.read_csv('data_list.csv')\n",
    "        self.features = []\n",
    "\n",
    "    def extract_feature1(self, file_name):\n",
    "        self.file_name = file_name\n",
    "        try:\n",
    "            self.audio, self.sample_rate = librosa.load(self.file_name, res_type='kaiser_fast')\n",
    "            self.mfccs = librosa.feature.mfcc(y=self.audio, sr=self.sample_rate, n_mfcc=40)\n",
    "            self.pad_width = self.max_pad_len - self.mfccs.shape[1]\n",
    "            self.mfccs = np.pad(self.mfccs, self.pad_width=((0,0), (0, pad_width)), mode='constant')\n",
    "            print(self.mfccs.shape)\n",
    "\n",
    "        except Exception as e:\n",
    "            print(\"Error encountered while parsing file: \", self.file_name)\n",
    "            print(e);\n",
    "            return None\n",
    "\n",
    "        return self.mfccs\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    def sound_learning(self, fulldatasetpath, metadata, features):\n",
    "        for index, row in self.metadata.iterrows():\n",
    "            self.file_name = os.path.join(os.path.abspath(self.fulldatasetpath),\n",
    "                        'data_'+str(row[\"class\"])+'/', str(row[\"file_name\"])+'.wav')\n",
    "\n",
    "            self.class_label = row[\"classID\"]\n",
    "            self.data = extract_feature1(file_name)\n",
    "\n",
    "            self.features.append([self.data, self.class_label])\n",
    "\n",
    "        return self.features\n",
    "\n",
    "\n",
    "    def generate_model(self):\n",
    "        self.ip = Input(shape=(40, 1000))\n",
    "\n",
    "        self.x = Masking()(self.ip)\n",
    "        self.x = LSTM(units = 50, return_sequences = True)(self.x)\n",
    "        self.x = LSTM(units=50)(self.x)\n",
    "        self.x = Dropout(0.3)(self.x)\n",
    "\n",
    "\n",
    "        self.y = Reshape((40,1000))(self.ip)\n",
    "        self.y = Conv1D (kernel_size=3, filters=128, strides=3, padding='valid',kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "\n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=128, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y)\n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=128, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y)\n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=256, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y) \n",
    "\n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=256, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y) \n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=256, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y) \n",
    "\n",
    "        self.y = Conv1D (kernel_size=3, filters=256, padding='same', kernel_initializer='he_uniform')(self.y)\n",
    "        self.y = BatchNormalization()(self.y)\n",
    "        self.y = Activation('relu')(self.y)\n",
    "        self.y = MaxPooling1D(pool_size=3, strides=3)(self.y) \n",
    "\n",
    "        self.y = Dropout(0.5)(self.y)\n",
    "        self.y = Flatten()(self.y)\n",
    "\n",
    "        self.x = concatenate([self.x, self.y])\n",
    "\n",
    "        self.out = Dense(5, activation='softmax')(self.x)\n",
    "\n",
    "        self.model = Model(self.ip, self.out)\n",
    "        #model.summary()\n",
    "        return self.model\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
